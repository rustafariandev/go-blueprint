{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#go-blueprint-ultimate-golang-blueprint-library","title":"Go Blueprint - Ultimate Golang Blueprint Library","text":"<p>Powerful CLI tool designed to streamline the process of creating Go projects with a robust and standardized structure. Not only does Go Blueprint facilitate project initialization, but it also offers seamless integration with popular Go frameworks, allowing you to focus on your application's code from the very beginning.</p>"},{"location":"#why-choose-go-blueprint","title":"Why Choose Go Blueprint?","text":"<ul> <li> <p>Easy Setup and Installation: Go Blueprint simplifies the setup process, making it a breeze to install and get started with your Go projects.</p> </li> <li> <p>Pre-established Go Project Structure: Save time and effort by having the entire Go project structure set up automatically. No need to worry about directory layouts or configuration files.</p> </li> <li> <p>HTTP Server Configuration Made Easy: Whether you prefer Go's standard library HTTP package, Chi, Gin, Fiber, HttpRouter, Gorilla/mux or Echo, Go Blueprint caters to your server setup needs.</p> </li> <li> <p>Focus on Your Application Code: With Go Blueprint handling the project scaffolding, you can dedicate more time and energy to developing your application logic.</p> </li> </ul>"},{"location":"#project-structure","title":"Project Structure","text":"<p>Here's an overview of the project structure created by Go Blueprint when all options are utilized:</p> <pre><code>/ (Root)\n\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u251c\u2500\u2500 go-test.yml           # GitHub Actions workflow for running tests.\n\u2502       \u2514\u2500\u2500 release.yml           # GitHub Actions workflow for releasing the application.\n\u251c\u2500\u2500 cmd/\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u2514\u2500\u2500 main.go               # Main file for starting the server.\n\u2502   \u2514\u2500\u2500 web/\n\u2502       \u251c\u2500\u2500 assets/\n\u2502       \u2502   \u2514\u2500\u2500 js/\n\u2502       \u2502       \u2514\u2500\u2500 htmx.min.js   # HTMX library for dynamic HTML content \n\u2502       \u251c\u2500\u2500 base.templ            # Base HTML template file.\n\u2502       \u251c\u2500\u2500 base.templ.go         # Generated Go code for base template\n\u2502       \u251c\u2500\u2500 efs.go                # File for handling file system operations.\n\u2502       \u251c\u2500\u2500 hello.go              # Handler for serving \"hello\" endpoint.\n\u2502       \u251c\u2500\u2500 hello.templ           # Template file for the \"hello\" endpoint.\n\u2502       \u2514\u2500\u2500 hello.templ.go        # Generated Go code for the \"hello\" template. \n\u251c\u2500\u2500 internal/\n\u2502   \u251c\u2500\u2500 database/\n\u2502   \u2502   \u2514\u2500\u2500 database.go           # File containing functions related to database operations.\n\u2502   \u2514\u2500\u2500 server/\n\u2502       \u251c\u2500\u2500 routes.go             # File defining HTTP routes.\n\u2502       \u2514\u2500\u2500 server.go             # Main server logic.\n\u251c\u2500\u2500 tests/    \n\u2502   \u2514\u2500\u2500 handler_test.go           # Test file for testing HTTP handlers.\n\u251c\u2500\u2500 .air.toml                     # Configuration file for Air, a live-reload utility.\n\u251c\u2500\u2500 docker-compose.yml            # Docker Compose configuration for defining DB config.\n\u251c\u2500\u2500 .env                          # Environment configuration file.\n\u251c\u2500\u2500 .gitignore                    # File specifying which files and directories to ignore in Git.\n\u251c\u2500\u2500 go.mod                        # Go module file for managing dependencies.\n\u251c\u2500\u2500 .goreleaser.yml               # Configuration file for GoReleaser, a tool for building and releasing binaries.\n\u251c\u2500\u2500 go.sum                        # Go module file containing checksums for dependencies.\n\u251c\u2500\u2500 Makefile                      # Makefile for defining and running commands.\n\u2514\u2500\u2500 README.md                     # Project's README file containing essential information about the project.\n</code></pre> <p>This structure provides a comprehensive organization of your project, separating source code, tests, configurations and documentation.</p>"},{"location":"blueprint-ui/","title":"Blueprint UI","text":"<p>The Blueprint UI is a crucial component of the Go Blueprint ecosystem, providing a user-friendly interface for creating CLI commands and visualizing project structures.</p> <p>By visiting the Blueprint UI website at go-blueprint.dev, users can interact with a visual representation of their project setup before executing commands.</p> <p></p> <p>This enhances the overall experience of using Go Blueprint by providing a visual representation of project setups and simplifying the command generation process. Check Blueprint UI code.</p>"},{"location":"installation/","title":"Installation","text":"<p>Go-Blueprint provides a convenient CLI tool to effortlessly set up your Go projects. Follow the steps below to install the tool on your system.</p>"},{"location":"installation/#binary-installation","title":"Binary Installation","text":"<p>To install the Go-Blueprint CLI tool as a binary, Run the following command:</p> <pre><code>go install github.com/melkeydev/go-blueprint@latest\n</code></pre> <p>This command installs the Go-Blueprint binary, automatically binding it to your <code>$GOPATH</code>.</p>"},{"location":"installation/#building-and-installing-from-source","title":"Building and Installing from Source","text":"<p>If you prefer to build and install Go-Blueprint directly from the source code, you can follow these steps:</p> <p>Clone the Go-Blueprint repository from GitHub:</p> <pre><code>git clone https://github.com/melkeydev/go-blueprint\n</code></pre> <p>Build the Go-Blueprint binary:</p> <pre><code>go build\n</code></pre> <p>Install in your <code>$PATH</code> to make it accessible system-wide:</p> <pre><code>go install\n</code></pre> <p>Verify the installation by running:</p> <pre><code>go-blueprint version\n</code></pre> <p>This should display the version information of the installed Go-Blueprint.</p> <p>Now you have successfully built and installed Go-Blueprint from the source code.</p>"},{"location":"advanced-flag/advanced-flag/","title":"Advanced Flag in Blueprint","text":"<p>The <code>--advanced</code> flag in Blueprint serves as a switch to enable additional features during project creation. It is applied with the <code>create</code> command and unlocks the following features:</p> <ul> <li> <p>HTMX Support using Templ: Enables the integration of HTMX support for dynamic web pages using Templ.</p> </li> <li> <p>CI/CD Workflow Setup using GitHub Actions: Automates the setup of a CI/CD workflow using GitHub Actions.</p> </li> <li> <p>Websocket Support: WebSocket endpoint that sends continuous data streams through the WS protocol.</p> </li> </ul> <p>To utilize the <code>--advanced</code> flag, use the following command:</p> <pre><code>go-blueprint create --name &lt;project_name&gt; --framework &lt;selected_framework&gt; --driver &lt;selected_driver&gt; --advanced\n</code></pre> <p>By including the <code>--advanced</code> flag, users can choose one or all of the advanced features. The flag enhances the simplicity of Blueprint while offering flexibility for users who require additional functionality.</p> <p>To recreate the project using the same configuration semi-interactively, use the following command:</p> <pre><code>go-blueprint create --name my-project --framework chi --driver mysql --advanced\n</code></pre> <p>Non-Interactive Setup is also possible:</p> <pre><code>go-blueprint create --name my-project --framework chi --driver mysql --advanced --feature htmx --feature githubaction --feature websocket\n</code></pre>"},{"location":"advanced-flag/goreleaser/","title":"GoReleaser & GoTest CI","text":"<p>Release process for Go projects, providing extensive customization options through its configuration file, <code>.goreleaser.yml</code>. By default, it ensures dependency cleanliness, builds binaries for various platforms and architectures, facilitates pre-release creation, and organizes binary packaging into archives with naming schemes.</p> <p>For comprehensive insights into customization possibilities, refer to the GoReleaser documentation.</p>"},{"location":"advanced-flag/goreleaser/#usage-with-tags","title":"Usage with Tags","text":"<p>To initiate release builds with GoReleaser, you need to follow these steps:</p> <ul> <li>Tag Creation:   When your project is ready for a release, create a new tag in your Git repository. For example:</li> </ul> <pre><code>git tag v1.0.0\n</code></pre> <ul> <li>Tag Pushing:   Push the tag to the repository to trigger GoReleaser:</li> </ul> <pre><code>git push origin v1.0.0\n</code></pre> <p>Following these steps ensures proper tagging of your project, prompting GoReleaser to execute configured releases. This approach simplifies release management and automates artifact distribution.</p>"},{"location":"advanced-flag/goreleaser/#go-test-continuous-integration-for-go-projects","title":"Go Test - Continuous Integration for Go Projects","text":"<p>The <code>go-test.yml</code> file defines a GitHub Actions workflow for continuous integration (CI) of Go projects within a GitHub repository.</p>"},{"location":"advanced-flag/goreleaser/#workflow-steps","title":"Workflow Steps","text":"<p>The job outlined in this workflow includes the following steps:</p> <ol> <li> <p>Checkout:    Fetches the project's codebase from the repository.</p> </li> <li> <p>Go Setup:    Configures the Go environment with version 1.21.x.</p> </li> <li> <p>Build and Test:    Builds the project using <code>go build</code> and runs tests across all packages (<code>./...</code>) using <code>go test</code>. </p> </li> </ol> <p>This workflow serves to automate the testing process of a Go project within a GitHub repository, ensuring code quality and reliability with each commit and pull request.</p>"},{"location":"advanced-flag/htmx-templ/","title":"HTMX and Templ","text":"<p>The WEB directory contains the web-related components and assets for the project. It leverages htmx and templ in Go for dynamic web content generation.</p>"},{"location":"advanced-flag/htmx-templ/#structure","title":"Structure","text":"<pre><code>web/\n\u2502\n\u2502\n\u251c\u2500\u2500 assets/\n\u2502   \u2514\u2500\u2500 js/\n\u2502       \u2514\u2500\u2500 htmx.min.js     # htmx library for dynamic HTML content\n\u2502\n\u251c\u2500\u2500 base.templ              # Base template for HTML structure\n\u251c\u2500\u2500 base_templ.go           # Generated Go code for base template\n\u251c\u2500\u2500 efs.go                  # Embeds static files into the Go binary\n\u2502\n\u251c\u2500\u2500 hello.go                # Handler for the Hello Web functionality\n\u251c\u2500\u2500 hello.templ             # Template for rendering the Hello form and post data\n\u2514\u2500\u2500 hello_templ.go          # Generated Go code for hello template\n</code></pre>"},{"location":"advanced-flag/htmx-templ/#usage","title":"Usage","text":"<ul> <li>Navigate to Project Directory:</li> </ul> <pre><code>cd my-project\n</code></pre> <ul> <li>Install Templ CLI:</li> </ul> <pre><code>go install github.com/a-h/templ/cmd/templ@latest\n</code></pre> <ul> <li>Generate Templ Function Files:</li> </ul> <pre><code>templ generate\n</code></pre> <ul> <li>Start Server:</li> </ul> <pre><code>make run\n</code></pre>"},{"location":"advanced-flag/htmx-templ/#templating","title":"Templating","text":"<p>Templates are generated using the <code>templ generate</code> command after project creation. These templates are then compiled into Go code for efficient execution.</p> <p>You can test HTMX functionality on <code>localhost:port/web</code> endpoint.</p>"},{"location":"advanced-flag/websocket/","title":"Websocket","text":"<p>A <code>/websocket</code> endpoint is added in <code>routes.go</code> to facilitate websocket connections. Upon accessing this endpoint, the server establishes a websocket connection and begins transmitting timestamp messages at 2-second intervals. WS is utilized across all Go-blueprint supported frameworks. This simple implementation showcases how flexible project is.</p>"},{"location":"advanced-flag/websocket/#code-implementation","title":"Code Implementation","text":"<pre><code>func (s *Server) websocketHandler(c *gin.Context) {\n    w := c.Writer\n    r := c.Request\n    socket, err := websocket.Accept(w, r, nil)\n\n    if err != nil {\n        log.Printf(\"could not open websocket: %v\", err)\n        _, _ = w.Write([]byte(\"could not open websocket\"))\n        w.WriteHeader(http.StatusInternalServerError)\n        return\n    }\n\n    defer socket.Close(websocket.StatusGoingAway, \"server closing websocket\")\n\n    ctx := r.Context()\n    socketCtx := socket.CloseRead(ctx)\n\n    for {\n        payload := fmt.Sprintf(\"server timestamp: %d\", time.Now().UnixNano())\n        err := socket.Write(socketCtx, websocket.MessageText, []byte(payload))\n        if err != nil {\n            break\n        }\n        time.Sleep(time.Second * 2)\n    }\n}\n</code></pre>"},{"location":"blueprint-core/db-drivers/","title":"DB Drivers","text":"<p>To extend the project with database functionality, users can choose from a variety of Go database drivers. Each driver is tailored to work with specific database systems, providing flexibility based on project requirements:</p> <ol> <li>Mongo: Provides necessary tools for connecting and interacting with MongoDB databases.</li> <li>Mysql: Enables seamless integration with MySQL databases.</li> <li>Postgres: Facilitates connectivity to PostgreSQL databases.</li> <li>Redis: Provides tools for connecting and interacting with Redis.</li> <li>Sqlite: Suitable for projects requiring a lightweight, self-contained database. and interacting with Redis</li> </ol>"},{"location":"blueprint-core/db-drivers/#updated-project-structure","title":"Updated Project Structure","text":"<p>Integrating a database adds a new layer to the project structure, primarily in the <code>internal/database</code> directory:</p> <pre><code>/(Root)\n\u251c\u2500\u2500 /cmd\n\u2502   \u2514\u2500\u2500 /api\n\u2502       \u2514\u2500\u2500 main.go\n\u251c\u2500\u2500 /internal\n\u2502   \u251c\u2500\u2500 /database\n\u2502   \u2502   \u2514\u2500\u2500 database.go\n\u2502   \u2514\u2500\u2500 /server\n\u2502       \u251c\u2500\u2500 routes.go\n\u2502       \u2514\u2500\u2500 server.go\n\u251c\u2500\u2500 /tests\n\u2502   \u2514\u2500\u2500 handler_test.go\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 go.sum\n\u251c\u2500\u2500 Makefile\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"blueprint-core/db-drivers/#database-driver-implementation","title":"Database Driver Implementation","text":"<p>Users can select the desired database driver based on their project's specific needs. The chosen driver is then imported into the project, and the <code>database.go</code> file is adjusted accordingly to establish a connection and manage interactions with the selected database.</p>"},{"location":"blueprint-core/db-drivers/#docker-compose-for-quick-database-spinup","title":"Docker-Compose for Quick Database Spinup","text":"<p>To facilitate quick setup and testing, a <code>docker-compose.yml</code> file is provided. This file defines a service for the chosen database system with the necessary environment variables. Running <code>docker-compose up</code> will quickly spin up a containerized instance of the database, allowing users to test their application against a real database server.</p> <p>This Docker Compose approach simplifies the process of setting up a database for development or testing purposes, providing a convenient and reproducible environment for the project.</p>"},{"location":"blueprint-core/frameworks/","title":"Frameworks","text":"<p>Created project can utilizes several Go web frameworks to handle HTTP routing and server functionality. The chosen frameworks are:</p> <ol> <li>Chi: Lightweight and flexible router for building Go HTTP services.</li> <li>Echo: High-performance, extensible, minimalist Go web framework.</li> <li>Fiber: Express-inspired web framework designed to be fast, simple, and efficient.</li> <li>Gin: A web framework with a martini-like API, but with much better performance.</li> <li>Gorilla/mux: A powerful URL router and dispatcher for Golang.</li> <li>HttpRouter: A high-performance HTTP request router that scales well.</li> </ol>"},{"location":"blueprint-core/frameworks/#project-structure","title":"Project Structure","text":"<p>The project is structured with a simple layout, focusing on the cmd, internal, and tests directories:</p> <pre><code>/(Root)\n\u251c\u2500\u2500 /cmd\n\u2502   \u2514\u2500\u2500 /api\n\u2502       \u2514\u2500\u2500 main.go\n\u251c\u2500\u2500 /internal\n\u2502   \u2514\u2500\u2500 /server\n\u2502       \u251c\u2500\u2500 routes.go\n\u2502       \u2514\u2500\u2500 server.go\n\u251c\u2500\u2500 /tests\n\u2502   \u2514\u2500\u2500 handler_test.go\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 go.sum\n\u251c\u2500\u2500 Makefile\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"creating-project/air/","title":"Air","text":""},{"location":"creating-project/air/#air-live-reloading-utility","title":"Air - Live Reloading Utility","text":"<p>Air is a live-reloading utility designed to enhance the development experience by automatically rebuilding and restarting your Go application whenever changes are detected in the source code.</p> <p>The Makefile provided in the project repository includes a command make watch, which triggers Air to monitor file changes and initiate rebuilds and restarts as necessary. Additionally, if Air is not installed on your machine, the Makefile provides an option to install it automatically.</p> <p>Air's <code>.air.toml</code> configuration file allows customization of various aspects of its behavior.</p>"},{"location":"creating-project/air/#live-preview","title":"Live Preview","text":"<pre><code>make watch\n\n  __    _   ___  \n / /\\  | | | |_) \n/_/--\\ |_| |_| \\_ v1.51.0, built with Go go1.22.0\n\nmkdir /home/ujstor/code/blueprint-version-test/ws-test4/tmp\nwatching .\nwatching cmd\nwatching cmd/api\nwatching cmd/web\nwatching cmd/web/assets\nwatching cmd/web/assets/js\nwatching internal\nwatching internal/database\nwatching internal/server\nwatching tests\n!exclude tmp\nbuilding...\nmake[1]: Entering directory '/home/ujstor/code/blueprint-version-test/ws-test4'\nBuilding...\nProcessing path: /home/ujstor/code/blueprint-version-test/ws-test4\nGenerated code for \"/home/ujstor/code/blueprint-version-test/ws-test4/cmd/web/base.templ\" in 914.556\u00b5s\nGenerated code for \"/home/ujstor/code/blueprint-version-test/ws-test4/cmd/web/hello.templ\" in 963.157\u00b5s\nGenerated code for 2 templates with 0 errors in 1.274392ms\nmake[1]: Leaving directory '/home/ujstor/code/blueprint-version-test/ws-test4'\nrunning...\ninternal/server/routes.go has changed\nbuilding...\nmake[1]: Entering directory '/home/ujstor/code/blueprint-version-test/ws-test4'\nBuilding...\nProcessing path: /home/ujstor/code/blueprint-version-test/ws-test4\nGenerated code for \"/home/ujstor/code/blueprint-version-test/ws-test4/cmd/web/base.templ\" in 907.426\u00b5s\nGenerated code for \"/home/ujstor/code/blueprint-version-test/ws-test4/cmd/web/hello.templ\" in 1.16142ms\nGenerated code for 2 templates with 0 errors in 1.527556ms\nmake[1]: Leaving directory '/home/ujstor/code/blueprint-version-test/ws-test4'\nrunning...\n</code></pre> <p>Integrating Air into your development workflow alongside the provided Makefile enables a smooth and efficient process for building, testing, and running your Go applications. With automatic live-reloading, you can focus more on coding and less on manual build and restart steps.</p>"},{"location":"creating-project/makefile/","title":"Makefile","text":""},{"location":"creating-project/makefile/#makefile-project-management","title":"Makefile Project Management","text":"<p>This Makefile is included as a default after project creation. It offers a set of commands to simplify various development tasks for managing a Go project.</p>"},{"location":"creating-project/makefile/#commands","title":"Commands","text":"<ul> <li>Build the Application: Compiles the application and generates the executable.</li> </ul> <pre><code>make build\n</code></pre> <ul> <li>Run the Application: Executes the application using <code>go run</code>.</li> </ul> <pre><code>make run\n</code></pre> <ul> <li>Create DB Container: Utilizes Docker Compose to set up the database container. It includes a fallback for Docker Compose V1.</li> </ul> <pre><code>make docker-run\n</code></pre> <ul> <li>Shutdown DB Container: Stops and removes the database container. It also has a fallback for Docker Compose V1.</li> </ul> <pre><code>make docker-down\n</code></pre> <ul> <li>Test the Application: Executes tests defined in the <code>./tests</code> directory.</li> </ul> <pre><code>make test\n</code></pre> <ul> <li>Clean the Binary: Removes the generated binary file.</li> </ul> <pre><code>make clean\n</code></pre> <ul> <li>Live Reload: Monitors file changes and automatically rebuilds and restarts the application using <code>air</code>.</li> </ul> <pre><code>make watch\n</code></pre> <p>Makefile simplifies common development tasks, making it easier to build, run, test, and manage dependencies in a Go project. It enhances productivity by providing a standardized approach to project management.</p>"},{"location":"creating-project/project-init/","title":"Project init","text":""},{"location":"creating-project/project-init/#creating-a-project","title":"Creating a Project","text":"<p>After installing the Go-Blueprint CLI tool, you can create a new project with the default settings by running the following command:</p> <pre><code>go-blueprint create\n</code></pre> <p>This command will interactively guide you through the project setup process, allowing you to choose the project name, framework, and database driver.</p> <p></p>"},{"location":"creating-project/project-init/#using-flags-for-non-interactive-setup","title":"Using Flags for Non-Interactive Setup","text":"<p>For a non-interactive setup, you can use flags to provide the necessary information during project creation. Here's an example:</p> <pre><code>go-blueprint create --name my-project --framework gin --driver postgres\n</code></pre> <p>In this example:</p> <ul> <li><code>--name</code>: Specifies the name of the project (replace \"my-project\" with your desired project name).</li> <li><code>--framework</code>: Specifies the Go framework to be used (e.g., \"gin\").</li> <li><code>--driver</code>: Specifies the database driver to be integrated (e.g., \"postgres\").</li> </ul> <p>Customize the flags according to your project requirements.</p>"},{"location":"creating-project/project-init/#advanced-flag","title":"Advanced Flag","text":"<p>By including the <code>--advanced</code> flag, users can choose one or all of the advanced features, HTMX, GitHub Actions for CI/CD and Websocket support, during the project creation process. The flag enhances the simplicity of Blueprint while offering flexibility for users who require additional functionality.</p> <pre><code>go-blueprint create --advanced\n</code></pre> <p>To recreate the project using the same configuration semi-interactively, use the following command:</p> <pre><code>go-blueprint create --name my-project --framework chi --driver mysql --advanced\n</code></pre> <p>This approach opens interactive mode only for advanced features, which allow you to choose the one or combination of available features.</p> <p></p>"},{"location":"creating-project/project-init/#non-interactive-setup","title":"Non-Interactive Setup","text":"<p>Advanced features can be enabled using the <code>--feature</code> flag along with the <code>--advanced</code> flag:</p> <p>For HTMX:</p> <pre><code>go-blueprint create --advanced --feature htmx\n</code></pre> <p>For the CI/CD workflow:</p> <pre><code>go-blueprint create --advanced --feature githubaction\n</code></pre> <p>For the websocket:</p> <pre><code>go-blueprint create --advanced --feature websocket\n</code></pre> <p>Or all features at once:</p> <pre><code>go-blueprint create --name my-project --framework chi --driver mysql --advanced --feature htmx --feature githubaction --feature websocket\n</code></pre>"},{"location":"endpoints-test/mongo/","title":"MongoDB","text":"<p>To test the MongoDB Health Check endpoint, use the following curl command:</p> <pre><code>curl http://localhost:PORT/health\n</code></pre>"},{"location":"endpoints-test/mongo/#health-function","title":"Health Function","text":"<p>The <code>Health</code> function checks the health of the MongoDB by pinging it. It returns a simple map containing a health message.</p>"},{"location":"endpoints-test/mongo/#functionality","title":"Functionality","text":"<p>Ping MongoDB Server: The function pings the MongoDB thru server to check its availability.</p> <ul> <li>If the ping fails, it logs the error and terminates the program.</li> <li>If the ping succeeds, it returns a health message indicating that the server is healthy.</li> </ul>"},{"location":"endpoints-test/mongo/#sample-output","title":"Sample Output","text":"<p>The <code>Health</code> returns a JSON-like map structure with a single key indicating the health status:</p> <pre><code>{\n  \"message\": \"It's healthy\"\n}\n</code></pre>"},{"location":"endpoints-test/mongo/#code-implementation","title":"Code implementation","text":"<pre><code>func (s *service) Health() map[string]string {\n    ctx, cancel := context.WithTimeout(context.Background(), 1*time.Second)\n    defer cancel()\n\n    err := s.db.Ping(ctx, nil)\n    if err != nil {\n        log.Fatalf(fmt.Sprintf(\"db down: %v\", err))\n    }\n\n    return map[string]string{\n        \"message\": \"It's healthy\",\n    }\n}\n</code></pre>"},{"location":"endpoints-test/mongo/#note","title":"Note","text":"<p>Currently, MongoDB does not support advanced health check functions like SQL databases or Redis. Implementation is basic, providing only a simple ping response to indicate if the server is reachable and DB connection healthy. Advanced health metrics such as connection pool statistics, memory usage, and detailed server information are not currently included.</p>"},{"location":"endpoints-test/redis/","title":"Redis","text":"<p>To test the Redis Health Check endpoint, use the following curl command:</p> <pre><code>curl http://localhost:PORT/health\n</code></pre>"},{"location":"endpoints-test/redis/#health-function","title":"Health Function","text":"<p>The <code>Health</code> function orchestrates the health assessment of the Redis server by invoking the <code>checkRedisHealth</code> function and returning the collected statistics.</p>"},{"location":"endpoints-test/redis/#functionality","title":"Functionality","text":"<p>Check Redis Health: The function pings the Redis server to check its availability and adds the response to the stats map.</p> <ul> <li>If the ping fails, it logs the error and terminates the program.</li> <li>If the ping succeeds, it proceeds to retrieve additional information.</li> </ul> <p>Retrieve Redis Information: The function retrieves information about the Redis server, including version, mode, connected clients, memory usage, uptime, etc.</p> <ul> <li>If an error occurs during info retrieval, it updates the health message accordingly.</li> </ul> <p>Evaluate Redis Statistics: The function evaluates the collected statistics to identify potential issues and updates the health message accordingly.</p> <ul> <li>It checks for high number of connected clients, stale connections, memory usage, recent restart, high idle connections, and high connection pool utilization.</li> </ul>"},{"location":"endpoints-test/redis/#sample-output","title":"Sample Output","text":"<p>The <code>Health</code> function returns a JSON-like map structure with various keys representing different health metrics and their corresponding values.</p> <pre><code>{\n  \"redis_active_connections\": \"0\",\n  \"redis_connected_clients\": \"1\",\n  \"redis_hits_connections\": \"1\",\n  \"redis_idle_connections\": \"1\",\n  \"redis_max_memory\": \"0\",\n  \"redis_message\": \"Redis has been recently restarted\",\n  \"redis_misses_connections\": \"1\",\n  \"redis_mode\": \"standalone\",\n  \"redis_ping_response\": \"PONG\",\n  \"redis_pool_size_percentage\": \"0.42%\",\n  \"redis_stale_connections\": \"0\",\n  \"redis_status\": \"up\",\n  \"redis_timeouts_connections\": \"0\",\n  \"redis_total_connections\": \"1\",\n  \"redis_uptime_in_seconds\": \"55\",\n  \"redis_used_memory\": \"980704\",\n  \"redis_used_memory_peak\": \"980704\",\n  \"redis_version\": \"7.2.4\"\n}\n</code></pre>"},{"location":"endpoints-test/redis/#serializationdeserialization","title":"Serialization/deserialization","text":"<p>The <code>Sample Output</code> is dynamic and unstructured since it depends on the raw map. To make it structurable, it must implement <code>JSON serialization/deserialization</code> or <code>Other serialization/deserialization</code> (e.g, <code>XML serialization/deserialization</code>) to bind it. For example:</p> <ul> <li><code>JSON serialization/deserialization</code></li> </ul> <pre><code>{\n  \"redis_health\": {\n    \"status\": \"up\",\n    \"message\": \"Redis connection pool utilization is high\",\n    \"stats\": {\n      \"version\": \"7.0.15\",\n      \"mode\": \"standalone\",\n      \"connected_clients\": \"10\",\n      \"memory\": {\n        \"used\": {\n          \"mb\": \"22.38\",\n          \"gb\": \"0.02\"\n        },\n        \"peak\": {\n          \"mb\": \"46.57\",\n          \"gb\": \"0.05\"\n        },\n        \"free\": {\n          \"mb\": \"1130.00\",\n          \"gb\": \"1.10\"\n        },\n        \"percentage\": \"1.98%\"\n      },\n      \"uptime_stats\": \"6 days, 3 hours, 37 minutes, 20 seconds\",\n      \"uptime\": [\n        {\n          \"day\": \"6\"\n        },\n        {\n          \"hour\": \"3\"\n        },\n        {\n          \"minute\": \"37\"\n        },\n        {\n          \"second\": \"20\"\n        }\n      ],\n      \"pooling\": {\n        \"figures\": {\n          \"hits\": \"10\",\n          \"misses\": \"2\",\n          \"timeouts\": \"0\",\n          \"total\": \"4\",\n          \"stale\": \"9\",\n          \"idle\": \"5\",\n          \"active\": \"0\",\n          \"percentage\": \"62.50%\"\n        },\n        \"observed_total\": \"26\"\n      }\n    }\n  }\n}\n</code></pre> <ul> <li><code>XML serialization/deserialization</code></li> </ul> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;redis_health&gt;\n  &lt;status&gt;up&lt;/status&gt;\n  &lt;message&gt;Redis connection pool utilization is high&lt;/message&gt;\n  &lt;stats&gt;\n    &lt;version&gt;7.0.15&lt;/version&gt;\n    &lt;mode&gt;standalone&lt;/mode&gt;\n    &lt;connected_clients&gt;10&lt;/connected_clients&gt;\n    &lt;memory&gt;\n      &lt;used&gt;\n        &lt;mb&gt;22.38&lt;/mb&gt;\n        &lt;gb&gt;0.02&lt;/gb&gt;\n      &lt;/used&gt;\n      &lt;peak&gt;\n        &lt;mb&gt;46.57&lt;/mb&gt;\n        &lt;gb&gt;0.05&lt;/gb&gt;\n      &lt;/peak&gt;\n      &lt;free&gt;\n        &lt;mb&gt;1130.00&lt;/mb&gt;\n        &lt;gb&gt;1.10&lt;/gb&gt;\n      &lt;/free&gt;\n      &lt;percentage&gt;1.98%&lt;/percentage&gt;\n    &lt;/memory&gt;\n    &lt;uptime_stats&gt;6 days, 3 hours, 37 minutes, 20 seconds&lt;/uptime_stats&gt;\n    &lt;uptime&gt;\n      &lt;day&gt;6&lt;/day&gt;\n      &lt;hour&gt;3&lt;/hour&gt;\n      &lt;minute&gt;37&lt;/minute&gt;\n      &lt;second&gt;20&lt;/second&gt;\n    &lt;/uptime&gt;\n    &lt;pooling&gt;\n      &lt;figures&gt;\n        &lt;hits&gt;10&lt;/hits&gt;\n        &lt;misses&gt;2&lt;/misses&gt;\n        &lt;timeouts&gt;0&lt;/timeouts&gt;\n        &lt;total&gt;4&lt;/total&gt;\n        &lt;stale&gt;9&lt;/stale&gt;\n        &lt;idle&gt;5&lt;/idle&gt;\n        &lt;active&gt;0&lt;/active&gt;\n        &lt;percentage&gt;62.50%&lt;/percentage&gt;\n      &lt;/figures&gt;\n      &lt;observed_total&gt;26&lt;/observed_total&gt;\n    &lt;/pooling&gt;\n  &lt;/stats&gt;\n&lt;/redis_health&gt;\n</code></pre>"},{"location":"endpoints-test/redis/#code-implementation","title":"Code Implementation","text":"<pre><code>func (s *service) Health() map[string]string {\n    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second) // Default is now 5s\n    defer cancel()\n\n    stats := make(map[string]string)\n\n    stats = s.checkRedisHealth(ctx, stats)\n\n    return stats\n}\n\nfunc (s *service) checkRedisHealth(ctx context.Context, stats map[string]string) map[string]string {\n    pong, err := s.db.Ping(ctx).Result()\n    if err != nil {\n        log.Fatalf(fmt.Sprintf(\"db down: %v\", err))\n    }\n\n    stats[\"redis_status\"] = \"up\"\n    stats[\"redis_message\"] = \"It's healthy\"\n    stats[\"redis_ping_response\"] = pong\n\n    info, err := s.db.Info(ctx).Result()\n    if err != nil {\n        stats[\"redis_message\"] = fmt.Sprintf(\"Failed to retrieve Redis info: %v\", err)\n        return stats\n    }\n\n    redisInfo := parseRedisInfo(info)\n\n    poolStats := s.db.PoolStats()\n\n    stats[\"redis_version\"] = redisInfo[\"redis_version\"]\n    stats[\"redis_mode\"] = redisInfo[\"redis_mode\"]\n    stats[\"redis_connected_clients\"] = redisInfo[\"connected_clients\"]\n    stats[\"redis_used_memory\"] = redisInfo[\"used_memory\"]\n    stats[\"redis_used_memory_peak\"] = redisInfo[\"used_memory_peak\"]\n    stats[\"redis_uptime_in_seconds\"] = redisInfo[\"uptime_in_seconds\"]\n    stats[\"redis_hits_connections\"] = strconv.FormatUint(uint64(poolStats.Hits), 10)\n    stats[\"redis_misses_connections\"] = strconv.FormatUint(uint64(poolStats.Misses), 10)\n    stats[\"redis_timeouts_connections\"] = strconv.FormatUint(uint64(poolStats.Timeouts), 10)\n    stats[\"redis_total_connections\"] = strconv.FormatUint(uint64(poolStats.TotalConns), 10)\n    stats[\"redis_idle_connections\"] = strconv.FormatUint(uint64(poolStats.IdleConns), 10)\n    stats[\"redis_stale_connections\"] = strconv.FormatUint(uint64(poolStats.StaleConns), 10)\n    stats[\"redis_max_memory\"] = redisInfo[\"maxmemory\"]\n\n    activeConns := uint64(math.Max(float64(poolStats.TotalConns-poolStats.IdleConns), 0))\n    stats[\"redis_active_connections\"] = strconv.FormatUint(activeConns, 10)\n\n    poolSize := s.db.Options().PoolSize\n    connectedClients, _ := strconv.Atoi(redisInfo[\"connected_clients\"])\n    poolSizePercentage := float64(connectedClients) / float64(poolSize) * 100\n    stats[\"redis_pool_size_percentage\"] = fmt.Sprintf(\"%.2f%%\", poolSizePercentage)\n\n    return s.evaluateRedisStats(redisInfo, stats)\n}\n\nfunc (s *service) evaluateRedisStats(redisInfo, stats map[string]string) map[string]string {\n    poolSize := s.db.Options().PoolSize\n    poolStats := s.db.PoolStats()\n    connectedClients, _ := strconv.Atoi(redisInfo[\"connected_clients\"])\n    highConnectionThreshold := int(float64(poolSize) * 0.8)\n\n    if connectedClients &gt; highConnectionThreshold {\n        stats[\"redis_message\"] = \"Redis has a high number of connected clients\"\n    }\n\n    minStaleConnectionsThreshold := 500\n    if int(poolStats.StaleConns) &gt; minStaleConnectionsThreshold {\n        stats[\"redis_message\"] = fmt.Sprintf(\"Redis has %d stale connections.\", poolStats.StaleConns)\n    }\n\n    usedMemory, _ := strconv.ParseInt(redisInfo[\"used_memory\"], 10, 64)\n    maxMemory, _ := strconv.ParseInt(redisInfo[\"maxmemory\"], 10, 64)\n    if maxMemory &gt; 0 {\n        usedMemoryPercentage := float64(usedMemory) / float64(maxMemory) * 100\n        if usedMemoryPercentage &gt;= 90 {\n            stats[\"redis_message\"] = \"Redis is using a significant amount of memory\"\n        }\n    }\n\n    uptimeInSeconds, _ := strconv.ParseInt(redisInfo[\"uptime_in_seconds\"], 10, 64)\n    if uptimeInSeconds &lt; 3600 {\n        stats[\"redis_message\"] = \"Redis has been recently restarted\"\n    }\n\n    idleConns := int(poolStats.IdleConns)\n    highIdleConnectionThreshold := int(float64(poolSize) * 0.7)\n    if idleConns &gt; highIdleConnectionThreshold {\n        stats[\"redis_message\"] = \"Redis has a high number of idle connections\"\n    }\n\n    poolUtilization := float64(poolStats.TotalConns-poolStats.IdleConns) / float64(poolSize) * 100\n    highPoolUtilizationThreshold := 90.0\n    if poolUtilization &gt; highPoolUtilizationThreshold {\n        stats[\"redis_message\"] = \"Redis connection pool utilization is high\"\n    }\n\n    return stats\n}\n</code></pre>"},{"location":"endpoints-test/server/","title":"Server","text":""},{"location":"endpoints-test/server/#testing-endpoints-with-curl-and-websocat","title":"Testing Endpoints with CURL and WebSocat","text":"<p>Testing endpoints is an essential part of ensuring the correctness and functionality of your app. Depending on what options are used for go-blueprint project creation, you have various endpoints for testing your init application status.</p> <p>Before proceeding, ensure you have the following tools installed:</p> <ul> <li>CURL: A command-line tool for transferring data with URLs.</li> <li>WebSocat: A command-line WebSocket client.</li> </ul> <p>You can utilize alternative tools that support the WebSocket protocol to establish connections with the server. WebSocat is an open-source CLI tool, while POSTMAN serves as a GUI tool specifically designed for testing APIs and WebSocket functionality.</p>"},{"location":"endpoints-test/server/#hello-world-endpoint","title":"Hello World Endpoint","text":"<p>To test the Hello World endpoint, execute the following curl command:</p> <pre><code>curl http://localhost:PORT\n</code></pre> <p>Sample Output:</p> <pre><code>{\"message\": \"Hello World\"}\n</code></pre> <p>If the server is running and it is healthy, you should see the message 'Hello World' in the response. Also, depending on the framework you are using, there will be logs in the console:</p> <pre><code>make run\n[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.\n\n[GIN-debug] [WARNING] Running in \"debug\" mode. Switch to \"release\" mode in production.\n - using env:   export GIN_MODE=release\n - using code:  gin.SetMode(gin.ReleaseMode)\n\n[GIN-debug] GET    /                         --&gt; websocket-test/internal/server.(*Server).HelloWorldHandler-fm (3 handlers)\n[GIN-debug] GET    /health                   --&gt; websocket-test/internal/server.(*Server).healthHandler-fm (3 handlers)\n[GIN-debug] GET    /websocket                --&gt; websocket-test/internal/server.(*Server).websocketHandler-fm (3 handlers)\n[GIN] 2024/05/28 - 17:44:31 | 200 |       27.93\u00b5s |       127.0.0.1 | GET      \"/\"\n</code></pre>"},{"location":"endpoints-test/sql/","title":"SQL DBs","text":"<p>To test the SQL DB Health Check endpoint, use the following curl command:</p> <pre><code>curl http://localhost:PORT/health\n</code></pre>"},{"location":"endpoints-test/sql/#health-function","title":"Health Function","text":"<p>The <code>Health</code> function checks the health of the database connection by pinging the database and retrieving various statistics. It returns a map with keys indicating different health metrics.</p>"},{"location":"endpoints-test/sql/#functionality","title":"Functionality","text":"<p>Ping the Database: The function pings the database to ensure it is reachable.</p> <ul> <li>If the database is down, it logs the error, sets the status to \"down,\" and terminates the program.</li> <li>If the database is up, it proceeds to gather additional statistics.</li> </ul> <p>Collect Database Statistics: The function retrieves the following statistics from the database connection:</p> <ul> <li><code>open_connections</code>: Number of open connections to the database.</li> <li><code>in_use</code>: Number of connections currently in use.</li> <li><code>idle</code>: Number of idle connections.</li> <li><code>wait_count</code>: Number of times a connection has to wait.</li> <li><code>wait_duration</code>: Total time connections have spent waiting.</li> <li><code>max_idle_closed</code>: Number of connections closed due to exceeding idle time.</li> <li><code>max_lifetime_closed</code>: Number of connections closed due to exceeding their lifetime.</li> </ul> <p>Evaluate Statistics: Evaluates the collected statistics to provide a health message. Based on predefined thresholds, it updates the health message to indicate potential issues, such as heavy load or high wait events.</p>"},{"location":"endpoints-test/sql/#sample-output","title":"Sample Output","text":"<p>The <code>Health</code> function returns a JSON-like map structure with the following keys and example values:</p> <pre><code>{\n  \"idle\": \"1\",\n  \"in_use\": \"0\",\n  \"max_idle_closed\": \"0\",\n  \"max_lifetime_closed\": \"0\",\n  \"message\": \"It's healthy\",\n  \"open_connections\": \"1\",\n  \"status\": \"up\",\n  \"wait_count\": \"0\",\n  \"wait_duration\": \"0s\"\n}\n</code></pre>"},{"location":"endpoints-test/sql/#code-implementation","title":"Code Implementation","text":"<pre><code>func (s *service) Health() map[string]string {\n    ctx, cancel := context.WithTimeout(context.Background(), 1*time.Second)\n    defer cancel()\n\n    stats := make(map[string]string)\n\n    err := s.db.PingContext(ctx)\n    if err != nil {\n        stats[\"status\"] = \"down\"\n        stats[\"error\"] = fmt.Sprintf(\"db down: %v\", err)\n        log.Fatalf(fmt.Sprintf(\"db down: %v\", err)) \n        return stats\n    }\n\n    stats[\"status\"] = \"up\"\n    stats[\"message\"] = \"It's healthy\"\n\n    dbStats := s.db.Stats()\n    stats[\"open_connections\"] = strconv.Itoa(dbStats.OpenConnections)\n    stats[\"in_use\"] = strconv.Itoa(dbStats.InUse)\n    stats[\"idle\"] = strconv.Itoa(dbStats.Idle)\n    stats[\"wait_count\"] = strconv.FormatInt(dbStats.WaitCount, 10)\n    stats[\"wait_duration\"] = dbStats.WaitDuration.String()\n    stats[\"max_idle_closed\"] = strconv.FormatInt(dbStats.MaxIdleClosed, 10)\n    stats[\"max_lifetime_closed\"] = strconv.FormatInt(dbStats.MaxLifetimeClosed, 10)\n\n    if dbStats.OpenConnections &gt; 40 { \n        stats[\"message\"] = \"The database is experiencing heavy load.\"\n    }\n\n    if dbStats.WaitCount &gt; 1000 {\n        stats[\"message\"] = \"The database has a high number of wait events, indicating potential bottlenecks.\"\n    }\n\n    if dbStats.MaxIdleClosed &gt; int64(dbStats.OpenConnections)/2 {\n        stats[\"message\"] = \"Many idle connections are being closed, consider revising the connection pool settings.\"\n    }\n\n    if dbStats.MaxLifetimeClosed &gt; int64(dbStats.OpenConnections)/2 {\n        stats[\"message\"] = \"Many connections are being closed due to max lifetime, consider increasing max lifetime or revising the connection usage pattern.\"\n    }\n\n    return stats\n}\n</code></pre>"},{"location":"endpoints-test/web/","title":"Web Endpoint","text":"<p>To test the /web endpoint when HTMX and Temp are used, you can simply open it in a web browser. This endpoint serves an HTML page with a form.</p> <p>Navigate to <code>http://localhost:PORT/web</code></p> <p>This page contains a form with a single input field and a submit button. Upon submitting the form, \"Hello, [input]\" will be displayed.</p>"},{"location":"endpoints-test/web/#sample-output","title":"Sample output","text":""},{"location":"endpoints-test/web/#console-log","title":"Console log","text":"<pre><code>make run\n2024/05/28 20:42:06 \"POST http://localhost:8070/hello HTTP/1.1\" from 127.0.0.1:45494 - 200 24B in 53.23\u00b5s\n</code></pre>"},{"location":"endpoints-test/websocket/","title":"Websocket","text":""},{"location":"endpoints-test/websocket/#testing-with-websocat","title":"Testing with WebSocat","text":"<p>WebSocat is a versatile tool for working with websockets from the command line. Below are some examples of using WebSocat to test the websocket endpoint:</p> <pre><code># Start server\nmake run\n</code></pre> <pre><code># Connect to the websocket endpoint\n$ websocat ws://localhost:PORT/websocket\n</code></pre> <p>Replace <code>PORT</code> with the port number on which your server is running.</p>"},{"location":"endpoints-test/websocket/#sample-output","title":"Sample Output","text":"<p>Upon successful connection, the client should start receiving timestamp messages from the server every 2 seconds.</p> <pre><code>server timestamp: 1709046650354893857\nserver timestamp: 1709046652355956336\nserver timestamp: 1709046654357101642\nserver timestamp: 1709046656357202535\nserver timestamp: 1709046658358258120\nserver timestamp: 1709046660359338389\nserver timestamp: 1709046662360422533\nserver timestamp: 1709046664361194735\nserver timestamp: 1709046666362308678\nserver timestamp: 1709046668363390475\nserver timestamp: 1709046670364477838\nserver timestamp: 1709046672365193667\nserver timestamp: 1709046674366265199\nserver timestamp: 1709046676366564490\nserver timestamp: 1709046678367646090\nserver timestamp: 1709046680367851980\nserver timestamp: 1709046682368920527\n</code></pre>"}]}